// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model UserMeta {
  id                      Int            @id @default(autoincrement())
  createdAt               DateTime       @default(now()) @map(name: "created_at")
  updatedAt               DateTime       @default(now()) @map(name: "updated_at")
  email                   String         @unique
  discord                 String?
  name                    String?
  username                String?        @unique
  admin                   Boolean        @default(false)
  exunite                 Boolean        @default(false)
  institution             String?
  nodeSpecificActionTaken Boolean        @default(false)
  dq                      Boolean        @default(false)
  currentNode             Int            @default(0)
  keys                    Int            @default(0)
  points                  Int            @default(0)
  lastPointChange         DateTime       @default(now())
  commands                Command[]
  nodes                   VisitedNodes[]
}

model Command {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  command   String
  ip        String
  userAgent String?
  userId    Int
  user      UserMeta @relation(fields: [userId], references: [id])
}

model VisitedNodes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  node      Int      @default(0)
  userId    Int
  user      UserMeta @relation(fields: [userId], references: [id])
}

model UserLevel {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  level     Int       @default(0)
  active    Boolean   @default(true)
  solved    Boolean   @default(false)
  solvedAt  DateTime?
  userId    Int
  user      UserMeta  @relation(fields: [userId], references: [id])
}

model UserAttempts {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  level     Int       @default(0)
  attempt   String
  userId    Int
  sus       Boolean   @default(false)
  user      UserMeta  @relation(fields: [userId], references: [id])
}
